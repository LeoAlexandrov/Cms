@using DemoSite.ViewModels
@model HCms.ViewModels.Fragment

@{
	string id = Model.DomId;
	string type = Model.Props.type;
	var width = Model.Props.width;

	System.Text.StringBuilder divClass = new();

	string cls = type switch
	{
		"row" => "row",
		"column" => width != null ? string.Empty : "col",
		"container" => "container",
		"container-sm" => "container-sm",
		"container-md" => "container-md",
		"container-lg" => "container-lg",
		"container-xl" => "container-xl",
		"container-xxl" => "container-xxl",
		"container-fluid" => "container-fluid",
		_ => null
	};

	divClass.Append(cls);

	if (Model.Children != null && Model.Children.Any(c => c.XmlName == "container" && c.Props.type == "column"))
		divClass.Append(" g-4");

	if (width != null)
		foreach (var w in width)
		{
			if (!string.IsNullOrEmpty(cls = widthDivClass(w.breakpoint, w.span)))
				divClass.Append(' ').Append(cls);
		}

	var al = Model.Props.alignment;

	if (al != null)
		foreach (var a in al)
		{
			if (!string.IsNullOrEmpty(cls = alignDivClass(a.breakpoint, a.align)))
				divClass.Append(' ').Append(cls);
		}

	divClass.Append(Model.Attributes?.GetValueOrDefault("bootstrap:class"));

	cls = divClass.ToString();
}


<div id="@id" class="@cls @Model.CssClass()">
@if (Model.Children != null)
{
	foreach (var f in Model.Children)
	{
		await Html.RenderPartialAsync(f.XmlName, f);
	}
}
</div>

@{
	string widthDivClass(string breakpoint, string span)
	{
		if (string.IsNullOrEmpty(breakpoint) || string.IsNullOrEmpty(span))
			return null;

		string cls = breakpoint switch
		{
			"sm" => "col-sm",
			"md" => "col-md",
			"lg" => "col-lg",
			"xl" => "col-xl",
			"xxl" => "col-xxl",
			_ => "col"
		};

		return span switch
		{
			"auto" => cls + "-auto",
			"1" => cls + "-1",
			"2" => cls + "-2",
			"3" => cls + "-3",
			"4" => cls + "-4",
			"5" => cls + "-5",
			"6" => cls + "-6",
			"7" => cls + "-7",
			"8" => cls + "-8",
			"9" => cls + "-9",
			"10" => cls + "-10",
			"11" => cls + "-11",
			"12" => cls + "-12",
			_ => cls
		};
	}

	string alignDivClass(string breakpoint, string align)
	{
		string bp = breakpoint switch
		{
			"xs" => "xs-",
			"sm" => "sm-",
			"md" => "md-",
			"lg" => "lg-",
			"xl" => "xl-",
			"xxl" => "xxl-",
			_ => string.Empty
		};

		return align switch
		{
			"vertical-start" => $"align-items-{bp}start",
			"vertical-center" => $"align-items-{bp}center",
			"vertical-end" => $"align-items-{bp}end",
			"vertical-self-start" => $"align-self-{bp}start",
			"vertical-self-center" => $"align-self-{bp}center",
			"vertical-self-end" => $"align-self-{bp}end",
			"horizontal-self-center" => "text-center",
			"horizontal-start" => $"justify-content-{bp}start",
			"horizontal-center" => $"justify-content-{bp}center",
			"horizontal-end" => $"justify-content-{bp}end",
			"horizontal-around" => $"justify-content-{bp}around",
			"horizontal-between" => $"justify-content-{bp}between",
			"horizontal-evenly" => $"justify-content-{bp}evenly",
			_ => null
		};
	}
}