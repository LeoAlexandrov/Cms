@model AleProjects.Cms.Sdk.ViewModels.Fragment

@{
	string id = Model.DomId;

	System.Text.StringBuilder divClass = new("row");
	string cls;

	var al = Model.Props.container.alignment;

	if (al != null)
		foreach (var a in al)
		{
			if (!string.IsNullOrEmpty(cls = alignDivClass(a.breakpoint, a.align)))
				divClass.Append(' ').Append(cls);
		}

	cls = divClass.ToString();

	var columns = Model.Props.column;
	int n = columns.Length;
	int m = Model.Children != null ? Model.Children.Length : 0;

	if (m > n)
		m = n;
	else if (m < n)
		n = m;

}

<div id="@id" class="@cls">
	@for(int i = 0; i < n; i++)
	{
		cls = colDivClass(columns[i]);

		<div class="@cls">
			@{
				await Html.RenderPartialAsync(Model.Children[i].XmlName, Model.Children[i]);
			}
		</div>
	}
</div>

@{
	string colDivClass(dynamic col)
	{
		System.Text.StringBuilder divClass = new("col");
		string cls;

		var width = col.width;
		var al = col.alignment;

		if (width != null)
			foreach (var w in width)
			{
				if (!string.IsNullOrEmpty(cls = widthDivClass(w.breakpoint, w.span)))
					divClass.Append(' ').Append(cls);
			}

		if (al != null)
			foreach (var a in al)
			{
				if (!string.IsNullOrEmpty(cls = alignDivClass(a.breakpoint, a.align)))
					divClass.Append(' ').Append(cls);
			}


		return divClass.ToString();
	}

	string widthDivClass(string breakpoint, string span)
	{
		if (string.IsNullOrEmpty(breakpoint) || string.IsNullOrEmpty(span))
			return null;

		string cls = breakpoint switch
		{
			"sm" => "col-sm",
			"md" => "col-md",
			"lg" => "col-lg",
			"xl" => "col-xl",
			"xxl" => "col-xxl",
			_ => "col"
		};

		return span switch
		{
			"auto" => cls + "-auto",
			"1" => cls + "-1",
			"2" => cls + "-2",
			"3" => cls + "-3",
			"4" => cls + "-4",
			"5" => cls + "-5",
			"6" => cls + "-6",
			"7" => cls + "-7",
			"8" => cls + "-8",
			"9" => cls + "-9",
			"10" => cls + "-10",
			"11" => cls + "-11",
			"12" => cls + "-12",
			_ => cls
		};
	}

	string alignDivClass(string breakpoint, string align)
	{
		string bp = breakpoint switch
		{
			"xs" => "xs-",
			"sm" => "sm-",
			"md" => "md-",
			"lg" => "lg-",
			"xl" => "xl-",
			"xxl" => "xxl-",
			_ => string.Empty
		};

		return align switch
		{
			"vertical-start" => $"align-items-{bp}start",
			"vertical-center" => $"align-items-{bp}center",
			"vertical-end" => $"align-items-{bp}end",
			"vertical-self-start" => $"align-self-{bp}start",
			"vertical-self-center" => $"align-self-{bp}center",
			"vertical-self-end" => $"align-self-{bp}end",
			"horizontal-self-center" => "text-center",
			"horizontal-start" => $"justify-content-{bp}start",
			"horizontal-center" => $"justify-content-{bp}center",
			"horizontal-end" => $"justify-content-{bp}end",
			"horizontal-around" => $"justify-content-{bp}around",
			"horizontal-between" => $"justify-content-{bp}between",
			"horizontal-evenly" => $"justify-content-{bp}evenly",
			_ => null
		};
	}
}