@using AleProjects.Cms.Sdk.ViewModels
@model Fragment

@{
	string id = Model.DomId;
	int activeIdx = -1;

	int interval = Model.Props.appearance.interval;
	string sInterval = interval == 0 ? "false" : interval.ToString();

	var items = Model.Props.item;

	int n = items.Length;
	int m = Model.Children != null ? Model.Children.Length : 0;
}


<style>
@for (int i = 0; i < n; i++)
{
	<text>.carousel-item:nth-child(@(i+1)) {
	background: no-repeat center / cover url('@items[i].picture.source');
}</text>
}
</style>

<div id="@id" class="carousel slide carousel-fade breakout" data-mdb-ride="carousel" data-mdb-interval="@sInterval" data-mdb-carousel-init>

	<div class="carousel-indicators">
		@for (int i = 0; i < n; i++)
		{
			if (items[i].active && activeIdx < 0)
			{
				activeIdx = i;
			}

			<button type="button" data-mdb-target="#@id" data-mdb-slide-to="@i" class="@(activeIdx == i ? "active" : null)" aria-current="true"></button>

			if (activeIdx < 0)
			{
				activeIdx = 0;
			}
		}
	</div>

	<div class="carousel-inner shadow-4-strong">
		@for (int i = 0; i < n; i++)
		{
			<div class="carousel-item @(i == activeIdx ? "active" : null)">
				<div class="d-flex justify-content-center align-items-center text-white h-100">
				@if (i < m) 
				{
					await Html.RenderPartialAsync(Model.Children[i].XmlName, Model.Children[i]);
				}
				</div>
			</div>
		}
	</div>

	@if (Model.Props.appearance.buttons)
	{
		<button class="carousel-control-prev" type="button" data-mdb-target="#@id" data-mdb-slide="prev">
			<span class="carousel-control-prev-icon" aria-hidden="true"></span>
			<span class="visually-hidden">Previous</span>
		</button>
		<button class="carousel-control-next" type="button" data-mdb-target="#@id" data-mdb-slide="next">
			<span class="carousel-control-next-icon" aria-hidden="true"></span>
			<span class="visually-hidden">Next</span>
		</button>
	}
</div>