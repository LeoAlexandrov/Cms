@using DemoSite.ViewModels
@using HCms.ViewModels
@model Fragment

@{
	string id = Model.DomId;
	string title = Model.Props.content.title;
	string subTitle = Model.Props.content.subtitle;
	string text = Model.Props.content.text;
	string layout = Model.Props.appearance.layout;
	bool horizontal = Model.Props.appearance.horizontal;
	bool featured = Model.Props.appearance.featured;

	var pict = Model.Props.picture;
	var actions = Model.Props.action;
	var pictSources = pict?.sources;

	bool isOver = pict != null && layout == "over";

	string textOnImgCls = isOver ? "text-white" : null;
	string fullHeightCls = Model.Parent != 0 ? "h-100" : null;
	string isOverCardCls = null;
	string featuredCls = featured ? "border border-primary shadow-4" : null;

	string imgSrc = pict?.source;
}

@if (isOver)
{
	isOverCardCls = "card" + Model.Id.ToString();

	<style>
		.@isOverCardCls {
			background: no-repeat center / cover url("@imgSrc");
		}

		@if (pictSources != null)
		{
			@foreach (var src in pictSources)
			{
				<text>@@media @src.media {
					.@isOverCardCls {
						background: no-repeat center / cover url("@src.srcset");
					}
				}</text>
			}
		}
	</style>
}

<div id="@id" class="card @Model.CssClass() @fullHeightCls @isOverCardCls @textOnImgCls @featuredCls">
	@if (horizontal && !isOver && pict != null)
	{
		<div class="row gx-4">
			<div class="col-md-6 @(layout == "end" ? "order-md-last" : null)">
				@{
					await Html.RenderPartialAsync("picture", new Fragment(Model, "picture", pict) { Attributes = new() { ["bootstrap:class"] = layout == "end" ? "img-fluid rounded-end" : "img-fluid rounded-start" } });
				}
			</div>
			<div class="col-md-6 @(layout == "end" ? "order-md-first" : null)">
				<div class="card-body">
					@if (!string.IsNullOrEmpty(title))
					{
						<h3 class="card-title">@Html.Raw(title)</h3>
					}
					@if (!string.IsNullOrEmpty(subTitle))
					{
						<h5 class="card-subtitle mb-3 text-secondary">@Html.Raw(subTitle)</h5>
					}
					@if (!string.IsNullOrEmpty(text))
					{
						<div class="card-text">@Html.Raw(text)</div>
					}
				</div>
				@if (actions != null)
				{
					<div class="mx-4 mb-4">
						@foreach (var a in actions)
						{
							await Html.RenderPartialAsync("action", new Fragment(Model, "action", a));
						}
					</div>
				}
			</div>
		</div>
	}
	else 
	{
		if (layout == "start" && pict != null)
		{
			await Html.RenderPartialAsync("picture", new Fragment(Model, "picture", pict) { Attributes = new() { ["bootstrap:class"] = "card-img-top" } });
		}
		<div class="card-body">
			@if (!string.IsNullOrEmpty(title))
			{
				<h3 class="card-title">@Html.Raw(title)</h3>
			}
			@if (!string.IsNullOrEmpty(subTitle))
			{
				<h5 class="card-subtitle mb-2 @(isOver ? null : "text-body-secondary")">@Html.Raw(subTitle)</h5>
			}
			@if (!string.IsNullOrEmpty(text))
			{
				<div class="card-text">@Html.Raw(text)</div>
			}
		</div>
		@if (layout == "end" && pict != null)
		{
			if (actions != null)
			{
			<div class="mx-4 mb-4">
			@foreach (var a in actions)
			{
				await Html.RenderPartialAsync("action", new Fragment(Model, "action", a));
			}
			</div>
		}
			await Html.RenderPartialAsync("picture", new Fragment(Model, "picture", Model.Props.picture) { Attributes = new() { ["bootstrap:class"] = "card-img-bottom" } });
		}
		else if (actions != null)
		{
			<div class="mx-4 mb-4">
			@foreach (var a in actions)
			{
				await Html.RenderPartialAsync("action", new Fragment(Model, "action", a));
			}
			</div>
		}
	}
</div>