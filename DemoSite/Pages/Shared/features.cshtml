@using HCms.ViewModels
@model Fragment

@{
	string id = Model.DomId;
	string title = Model.Props.title;
	string look = Model.Props.look;

	var features = Model.Props.feature;
	int n = features.Length;

	System.Text.StringBuilder divClass = new("row");
	string rowCls;

	var columns = Model.Props.container.columns;

	foreach (var col in columns)
	{
		if (!string.IsNullOrEmpty(rowCls = rowDivClass(col.breakpoint, col.number)))
			divClass.Append(' ').Append(rowCls);
	}

	var align = Model.Props.container.alignment;

	if (align != null)
		foreach (var a in align)
		{
			if (!string.IsNullOrEmpty(rowCls = alignDivClass(a.breakpoint, a.align)))
				divClass.Append(' ').Append(rowCls);
		}

	if (!string.IsNullOrEmpty(title))
		divClass.Append(" mt-4");

	rowCls = divClass.ToString();

	string cls = null;

	divClass.Clear();


	align = Model.Props.container.item_alignment;

	if (align != null)
	{
		foreach (var a in align)
		{
			if (!string.IsNullOrEmpty(cls = alignDivClass(a.breakpoint, a.align)))
			{
				divClass.Append(' ').Append(cls);
			}
		}

		cls = divClass.ToString();
	}

	bool isAlternative = look == "alternative" && !string.IsNullOrEmpty(title);
}

<div class="features-@look my-4" id="@id">
	@if (isAlternative)
	{
		@Html.Raw("<div class=\"row gx-5\">")
		<div class="col-lg-4 mb-4 mb-lg-0 mt-lg-4">
			<h1>@title</h1>
		</div>
		@Html.Raw("<div class=\"col-lg-8\">")
	}
	else if (!string.IsNullOrEmpty(title))
	{
			<h1 class="text-center fw-bolder">@title</h1>
	}

	<div class="@rowCls gx-4">
		@if (n != 0)
		{
			foreach (var f in features)
			{

				title = f.title;
				string subtitle = f.subtitle;
				string text = f.text;
				var pict = f.picture;
			

			<div class="col @cls mb-5 h-100">
			@if (pict != null)
			{
				await Html.RenderPartialAsync("picture", new Fragment(Model, "picture", pict) { Attributes = { ["bootstrap:img:class"] = "mb-4" } });
			}
			@if (!string.IsNullOrEmpty(title))
			{
				<h3>@Html.Raw(f.title)</h3>
			}
			@if (!string.IsNullOrEmpty(subtitle))
			{
				<h5>@Html.Raw(f.subtitle)</h5>
			}
			@if (!string.IsNullOrEmpty(text))
			{
				@Html.Raw(f.text)
			}
			</div>
			}
		}
	</div>

	@if (isAlternative)
	{
		@Html.Raw("</div></div>")
	}
</div>

@{
	string rowDivClass(string breakpoint, string span)
	{
		if (string.IsNullOrEmpty(breakpoint) || string.IsNullOrEmpty(span))
			return null;

		string cls = breakpoint switch
		{
			"sm" => "row-cols-sm",
			"md" => "row-cols-md",
			"lg" => "row-cols-lg",
			"xl" => "row-cols-xl",
			"xxl" => "row-cols-xxl",
			_ => "row-cols"
		};

		return span switch
		{
			"auto" => cls + "-auto",
			"1" => cls + "-1",
			"2" => cls + "-2",
			"3" => cls + "-3",
			"4" => cls + "-4",
			"5" => cls + "-5",
			"6" => cls + "-6",
			"7" => cls + "-7",
			"8" => cls + "-8",
			"9" => cls + "-9",
			"10" => cls + "-10",
			"11" => cls + "-11",
			"12" => cls + "-12",
			_ => cls
		};
	}

	string alignDivClass(string breakpoint, string align)
	{
		string bp = breakpoint switch
		{
			"xs" => "xs-",
			"sm" => "sm-",
			"md" => "md-",
			"lg" => "lg-",
			"xl" => "xl-",
			"xxl" => "xxl-",
			_ => string.Empty
		};

		return align switch
		{
			"vertical-start" => $"align-items-{bp}start",
			"vertical-center" => $"align-items-{bp}center",
			"vertical-end" => $"align-items-{bp}end",
			"vertical-self-start" => $"align-self-{bp}start",
			"vertical-self-center" => $"align-self-{bp}center",
			"vertical-self-end" => $"align-self-{bp}end",
			"horizontal-self-center" => "text-center",
			"horizontal-start" => $"justify-content-{bp}start",
			"horizontal-center" => $"justify-content-{bp}center",
			"horizontal-end" => $"justify-content-{bp}end",
			"horizontal-around" => $"justify-content-{bp}around",
			"horizontal-between" => $"justify-content-{bp}between",
			"horizontal-evenly" => $"justify-content-{bp}evenly",
			_ => null
		};
	}
}