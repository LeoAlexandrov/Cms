@model AleProjects.Cms.Sdk.ViewModels.Fragment

@{
	int columns = Model.Props.container.columns;
	dynamic width = Model.Props.cells.colwidth;
	dynamic align = Model.Props.container.alignment;
	string rowCls;

	System.Text.StringBuilder divClass = new($"row row-cols-{columns}");

	if (width != null)
		foreach (var w in width)
		{
			if (!string.IsNullOrEmpty(rowCls = widthDivClass(w.breakpoint, w.span)))
				divClass.Append(' ').Append(rowCls);
		}

	if (align != null)
		foreach (var a in align)
		{
			if (!string.IsNullOrEmpty(rowCls = alignDivClass(a.breakpoint, a.align)))
				divClass.Append(' ').Append(rowCls);
		}

	rowCls = divClass.ToString();
	divClass.Clear();

	string cls;

	align = Model.Props.cells.cells_alignment;

	if (align != null)
	{
		foreach (var a in align)
		{
			if (!string.IsNullOrEmpty(cls = alignDivClass(a.breakpoint, a.align)))
				divClass.Append(' ').Append(cls);
		}

		cls = divClass.ToString();

	}
	else cls = null;


	<div class="@rowCls">

	@if (Model.Children != null)
		foreach (var f in Model.Children)
		{
			<div class="col @cls">@{ 
				await Html.RenderPartialAsync(f.XmlName, f); 
			}
			</div>
		}
	</div>
}

@{
	string widthDivClass(string breakpoint, string span)
	{
		if (string.IsNullOrEmpty(breakpoint) || string.IsNullOrEmpty(span))
			return null;

		string cls = breakpoint switch
		{
			"sm" => "row-cols-sm",
			"md" => "row-cols-md",
			"lg" => "row-cols-lg",
			"xl" => "row-cols-xl",
			"xxl" => "row-cols-xxl",
			_ => "row-cols"
		};

		return span switch
		{
			"auto" => cls + "-auto",
			"1" => cls + "-1",
			"2" => cls + "-2",
			"3" => cls + "-3",
			"4" => cls + "-4",
			"5" => cls + "-5",
			"6" => cls + "-6",
			"7" => cls + "-7",
			"8" => cls + "-8",
			"9" => cls + "-9",
			"10" => cls + "-10",
			"11" => cls + "-11",
			"12" => cls + "-12",
			_ => cls
		};
	}

	string alignDivClass(string breakpoint, string align)
	{
		string bp = breakpoint switch
		{
			"xs" => "xs-",
			"sm" => "sm-",
			"md" => "md-",
			"lg" => "lg-",
			"xl" => "xl-",
			"xxl" => "xxl-",
			_ => string.Empty
		};

		return align switch
		{
			"vertical-start" => $"align-items-{bp}start",
			"vertical-center" => $"align-items-{bp}center",
			"vertical-end" => $"align-items-{bp}end",
			"vertical-self-start" => $"align-self-{bp}start",
			"vertical-self-center" => $"align-self-{bp}center",
			"vertical-self-end" => $"align-self-{bp}end",
			"horizontal-start" => $"justify-content-{bp}start",
			"horizontal-center" => $"justify-content-{bp}center",
			"horizontal-end" => $"justify-content-{bp}end",
			"horizontal-around" => $"justify-content-{bp}around",
			"horizontal-between" => $"justify-content-{bp}between",
			"horizontal-evenly" => $"justify-content-{bp}evenly",
			_ => null
		};
	}
}